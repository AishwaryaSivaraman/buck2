# Copyright (c) Meta Platforms, Inc. and affiliates.
#
# This source code is licensed under both the MIT license found in the
# LICENSE-MIT file in the root directory of this source tree and the Apache
# License, Version 2.0 found in the LICENSE-APACHE file in the root directory
# of this source tree.

def _streaming_output_ensured_artifact(ctx: bxl.Context):
    actions = ctx.bxl_actions().actions
    output = actions.write("output.txt", "hello world!")
    ensured_output = ctx.output.ensure(output)

    ctx.output.print("Line before streaming print")
    ctx.output.stream(ensured_output.abs_path())

streaming_output_ensured_artifact = bxl_main(
    cli_args = {},
    impl = _streaming_output_ensured_artifact,
)

def _streaming_output(ctx: bxl.Context):
    ctx.output.print("Line before streaming print")
    ctx.output.stream("This is the streaming output")

streaming_output = bxl_main(
    cli_args = {},
    impl = _streaming_output,
)

def _streaming_output_without_duplicates(ctx: bxl.Context):
    actions = ctx.bxl_actions().actions
    output = actions.write("output.txt", "hello world!")
    ensured_output = ctx.output.ensure(output)

    ctx.output.print("This is the normal output")
    ctx.output.stream("This is the streaming output")
    ctx.output.stream(ensured_output.abs_path())

streaming_output_without_duplicates = bxl_main(
    cli_args = {},
    impl = _streaming_output_without_duplicates,
)

def _streaming_output_waits_on(ctx: bxl.Context):
    actions = ctx.bxl_actions().actions
    output0 = actions.write("output0.txt", "hello world!")
    en0 = ctx.output.ensure(output0)

    output1 = actions.write("output1.txt", "hello world!")
    en1 = ctx.output.ensure(output1)

    ctx.output.stream("Waits on two file", additional_waits = [en0, en1])
    ctx.output.stream(en0)
    ctx.output.stream(en1)

streaming_output_waits_on = bxl_main(
    cli_args = {},
    impl = _streaming_output_waits_on,
)
