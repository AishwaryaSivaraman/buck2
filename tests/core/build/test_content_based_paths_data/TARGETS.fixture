load(
    ":defs.bzl",
    "cas_artifact_with_content_based_path",
    "copied_dir",
    "copy",
    "download_with_content_based_path",
    "dynamic_new_with_content_based_path",
    "dynamic_with_content_based_path",
    "failing_validation_with_content_based_path",
    "run_with_content_based_path",
    "symlink",
    "symlinked_dir",
    "use_projection_with_content_based_path",
    "write_json_with_content_based_path",
    "write_macro_with_content_based_path",
    "write_with_content_based_path",
)

write_with_content_based_path(
    name = "write_with_content_based_path",
    data = "hello world",
)

write_macro_with_content_based_path(
    name = "write_macro_with_content_based_path",
    arg = "$(@query_outputs :write_with_content_based_path)",
)

write_json_with_content_based_path(
    name = "write_json_with_content_based_path",
    source = ":write_with_content_based_path",
)

run_with_content_based_path(
    name = "run_remote_with_content_based_path",
    data = "hello world",
    prefer_local = False,
    _ignored = read_config("test", "ignored_attr", "ignored"),
)

run_with_content_based_path(
    name = "run_local_with_content_based_path",
    data = "hello world",
    prefer_local = True,
)

copy(
    name = "copy_with_content_based_path",
    to_copy = ":write_with_content_based_path",
)

symlink(
    name = "symlink_with_content_based_path",
    to_symlink = ":write_with_content_based_path",
)

copied_dir(
    name = "copied_dir_with_content_based_path",
    to_copy = ":write_with_content_based_path",
)

symlinked_dir(
    name = "symlinked_dir_with_content_based_path",
    to_symlink = ":write_with_content_based_path",
)

cas_artifact_with_content_based_path(
    name = "empty_cas_artifact_with_content_based_path",
    # The empty file is guaranteed to exist in RE.
    digest = "da39a3ee5e6b4b0d3255bfef95601890afd80709:0",
    use_case = "buck2-testing",
    expires_after_timestamp = 0,
)

download_with_content_based_path(
    name = "download_with_content_based_path",
)

failing_validation_with_content_based_path(
    name = "failing_validation_with_content_based_path",
)

dynamic_with_content_based_path(
    name = "dynamic_with_content_based_path",
)

dynamic_new_with_content_based_path(
    name = "dynamic_new_with_content_based_path",
)

use_projection_with_content_based_path(
    name = "use_projection_with_content_based_path",
)

platform(
    name = "p_default",
    constraint_values = [],
)

platform(
    name = "p_cat",
    constraint_values = [
        ":cat",
    ],
)

constraint_setting(
    name = "animal",
)

constraint_value(
    name = "cat",
    constraint_setting = ":animal",
)
