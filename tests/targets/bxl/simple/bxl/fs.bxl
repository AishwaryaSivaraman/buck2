load("//rules:unittest.bzl", "asserts")

# exist() test rules
def _impl_exists_absolute_path(ctx):
    asserts.true(ctx.fs.exists(ctx.cli_args.root_path + "/bin"))

def _impl_exists_relative_path(ctx):
    asserts.true(ctx.fs.exists("bin"))

def _impl_not_exists(ctx):
    asserts.false(ctx.fs.exists("does_not_exist"))

def _impl_exists_source_artifact(ctx):
    node = ctx.configured_targets("root//bin:the_binary")
    asserts.true(ctx.fs.exists(node.sources()[0]))

def _impl_exists_file_node(ctx):
    result = ctx.cquery().inputs("root//bin:the_binary")
    asserts.true(ctx.fs.exists(result[0]))

def _exists(ctx):
    _impl_exists_absolute_path(ctx)
    _impl_exists_relative_path(ctx)
    _impl_not_exists(ctx)
    _impl_exists_source_artifact(ctx)
    _impl_exists_file_node(ctx)

exists = bxl(
    impl = _exists,
    cli_args = {
        "root_path": cli_args.string(),
    },
)

# list() test rules
def _impl_list_absolute_path(ctx):
    list_results = ctx.fs.list(ctx.cli_args.root_path + "/bin")
    for result in list_results:
        ctx.output.print(result)

def _impl_list_relative_path(ctx):
    list_results = ctx.fs.list("bin")
    for result in list_results:
        ctx.output.print(result)

def _impl_list_source_artifact(ctx):
    source_artifact = ctx.configured_targets("root//bin:the_binary_with_dir_srcs").sources()[0]
    list_results = ctx.fs.list(source_artifact)
    for result in list_results:
        ctx.output.print(result)

def _impl_list_file_node(ctx):
    file_node = ctx.cquery().inputs("root//bin:the_binary_with_dir_srcs")[0]
    list_results = ctx.fs.list(file_node)
    for result in list_results:
        ctx.output.print(result)

def _impl_list_include_ignored(ctx):
    results = ctx.fs.list("bin", include_ignored = True)
    for result in results:
        ctx.output.print(result)

list_absolute_path = bxl(
    impl = _impl_list_absolute_path,
    cli_args = {
        "root_path": cli_args.string(),
    },
)

list_relative_path = bxl(
    impl = _impl_list_relative_path,
    cli_args = {
    },
)

list_source_artifact = bxl(
    impl = _impl_list_source_artifact,
    cli_args = {
    },
)

list_file_node = bxl(
    impl = _impl_list_file_node,
    cli_args = {
    },
)

list_include_ignored = bxl(
    impl = _impl_list_include_ignored,
    cli_args = {
    },
)

# is_file() test rules
def _impl_is_file_absolute_path(ctx):
    asserts.true(ctx.fs.is_file(ctx.cli_args.root_path + "/bin/TARGETS.fixture"))

def _impl_is_file_relative_path(ctx):
    asserts.true(ctx.fs.is_file("bin/TARGETS.fixture"))

def _impl_is_file_source_artifact(ctx):
    node = ctx.configured_targets("root//bin:the_binary")
    asserts.true(ctx.fs.is_file(node.sources()[0]))

def _impl_is_file_file_node(ctx):
    result = ctx.cquery().inputs("root//bin:the_binary")
    asserts.true(ctx.fs.is_file(result[0]))

def _impl_is_file_absolute_path_not_a_file(ctx):
    asserts.false(ctx.fs.is_file(ctx.cli_args.root_path + "/bin"))

def _impl_is_file_relative_path_not_a_file(ctx):
    asserts.false(ctx.fs.is_file("bin"))

def _impl_is_file_not_exists(ctx):
    asserts.false(ctx.fs.is_file("does_not_exist"))

def _is_file(ctx):
    _impl_is_file_absolute_path(ctx)
    _impl_is_file_relative_path(ctx)
    _impl_is_file_source_artifact(ctx)
    _impl_is_file_file_node(ctx)
    _impl_is_file_absolute_path_not_a_file(ctx)
    _impl_is_file_relative_path_not_a_file(ctx)
    _impl_is_file_not_exists(ctx)

is_file = bxl(
    impl = _is_file,
    cli_args = {
        "root_path": cli_args.string(),
    },
)

#is_dir() test rules
def _impl_is_dir_absolute_path(ctx):
    ctx.output.print(ctx.fs.is_dir(ctx.cli_args.root_path + "/bin"))

def _impl_is_dir_relative_path(ctx):
    ctx.output.print(ctx.fs.is_dir("bin"))

def _impl_is_dir_source_artifact(ctx):
    node = ctx.configured_targets("root//bin:the_binary")
    ctx.output.print(ctx.fs.is_dir(node.sources()[0]))

def _impl_is_dir_file_node(ctx):
    result = ctx.cquery().inputs("root//bin:the_binary")
    ctx.output.print(ctx.fs.is_dir(result[0]))

def _impl_is_dir_absolute_path_not_a_dir(ctx):
    ctx.output.print(ctx.fs.is_dir(ctx.cli_args.root_path + "/TARGETS.fixture"))

def _impl_is_dir_relative_path_not_a_dir(ctx):
    ctx.output.print(ctx.fs.is_dir("bin/TARGETS.fixture"))

def _impl_is_dir_not_exists(ctx):
    ctx.output.print(ctx.fs.is_dir("does_not_exist"))

def _is_dir(ctx):
    _impl_is_dir_absolute_path(ctx)
    _impl_is_dir_relative_path(ctx)
    _impl_is_dir_source_artifact(ctx)
    _impl_is_dir_file_node(ctx)
    _impl_is_dir_absolute_path_not_a_dir(ctx)
    _impl_is_dir_relative_path_not_a_dir(ctx)
    _impl_is_dir_not_exists(ctx)

is_dir = bxl(
    impl = _is_dir,
    cli_args = {
        "root_path": cli_args.string(),
    },
)
