# Copyright (c) Meta Platforms, Inc. and affiliates.
#
# This source code is licensed under both the MIT license found in the
# LICENSE-MIT file in the root directory of this source tree and the Apache
# License, Version 2.0 found in the LICENSE-APACHE file in the root directory
# of this source tree.

load("@fbcode_macros//build_defs:sanitizers.bzl", "sanitizers")
load("@prelude//:asserts.bzl", "asserts")

def _get_labels(ctx: bxl.Context, modifiers: list[str] | None) -> list[str]:
    # Use an empty target platform so it doesn't get configured against any sanitizer constraint by default
    targets = ctx.configured_targets("fbcode//buck2/tests/targets/rules/sh_test:test", modifiers = modifiers, target_platform = "ovr_config//platform:base")
    providers = ctx.analysis(targets).providers()
    test_info = providers[ExternalRunnerTestInfo]
    return test_info.labels

def _expect_in_labels(sanitizer: str, labels: list[str]):
    asserts.true(sanitizer in labels, "Expected to find sanitizer `{}` in labels `{}`".format(sanitizer, labels))

def _expect_not_in_labels(sanitizer: str, labels: list[str]):
    asserts.true(sanitizer not in labels, "Didn't expect to find sanitizer `{}` in labels `{}`".format(sanitizer, labels))

def _test(ctx: bxl.Context):
    labels = _get_labels(ctx, modifiers = ["ovr_config//build_mode/constraints:no-san"])
    for sanitizer in sanitizers.SANITIZERS.values():
        _expect_not_in_labels(sanitizer, labels)

    for sanitizer in ["asan", "asan-ubsan"]:
        labels = _get_labels(ctx, modifiers = ["ovr_config//build_mode/constraints:{}".format(sanitizer)])
        _expect_in_labels(sanitizer, labels)
        for other in sanitizers.SANITIZERS.values():
            if sanitizer != other:
                _expect_not_in_labels(other, labels)

def _test_with_buckconfigs(ctx: bxl.Context, sanitizer: str):
    labels = _get_labels(ctx, modifiers = [])
    _expect_in_labels(sanitizer, labels)
    for other in sanitizers.SANITIZERS.values():
        if sanitizer != other:
            _expect_not_in_labels(other, labels)

def _impl(ctx: bxl.Context):
    _test(ctx)

    sanitizer = read_root_config("fbcode", "sanitizer")
    if sanitizer:
        _test_with_buckconfigs(ctx, sanitizers.SANITIZERS[sanitizer])

test = bxl_main(
    impl = _impl,
    cli_args = {},
)
