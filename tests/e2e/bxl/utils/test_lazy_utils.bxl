# Copyright (c) Meta Platforms, Inc. and affiliates.
#
# This source code is licensed under both the MIT license found in the
# LICENSE-MIT file in the root directory of this source tree and the Apache
# License, Version 2.0 found in the LICENSE-APACHE file in the root directory
# of this source tree.

load("@prelude//:asserts.bzl", "asserts")
load("@prelude//bxl:lazy.bxl", "batch_apply_lazy", "catch_resolve_lazy_dict")

def _test_catch_resolve_lazy_dict(ctx: bxl.Context):
    targets = [
        "fbcode//buck2:buck2",
        "fbcode//buck2:buck2_bundle",
        "fbcode//buck2/app/buck2:buck2",
        "fbcode//buck2/app/buck2_bxl:buck2_bxl",
    ]
    name2lazy = {
        target: ctx.lazy.unconfigured_target_node(target)
        for target in targets
    }
    res = catch_resolve_lazy_dict(ctx, name2lazy)
    for key, value in res.items():
        asserts.true(isinstance(key, str))
        asserts.true(isinstance(value, bxl.Result))
        asserts.true(value.is_ok())
        node = value.unwrap()
        asserts.equals(key, str(node.label))

test_catch_resolve_lazy_dict = bxl_main(
    impl = _test_catch_resolve_lazy_dict,
    cli_args = {},
)

def _test_batch_apply_lazy(ctx: bxl.Context):
    targets = [
        "fbcode//buck2:buck2",
        "fbcode//buck2:buck2_bundle",
        "fbcode//buck2/app/buck2:buck2",
        "fbcode//buck2/app/buck2_bxl:buck2_bxl",
    ]
    nodes = batch_apply_lazy(ctx, ctx.lazy.configured_target_node, targets)

    for node in nodes:
        asserts.true(isinstance(node, bxl.ConfiguredTargetNode))

test_batch_apply_lazy = bxl_main(
    impl = _test_batch_apply_lazy,
    cli_args = {},
)
