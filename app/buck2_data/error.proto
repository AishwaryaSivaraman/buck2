/*
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under both the MIT license found in the
 * LICENSE-MIT file in the root directory of this source tree and the Apache
 * License, Version 2.0 found in the LICENSE-APACHE file in the root directory
 * of this source tree.
 */

syntax = "proto3";

// In protobuf, enum values are not namespaced in their type. That means that in
// any protbuf file, you can only have one enum variant with any given name. The
// only reason this file exists is to work around that limitation, especially
// for error types, which may often have a name that might also make sense
// elsewhere.
package buck.data.error;

// TODO(jakobdegen): this enum and `error_subcategory` scuba column
//   are deprecated. Use category+tag.
enum ErrorType {
  // Protobuf requires us to supply a default value; however, this type is
  // always used in an `optional` way and so no default value should ever
  // appear. Still, let's use a sentinal just to be safe.
  UNUSED_DEFAULT = 0;
  ACTION_COMMAND_FAILURE = 2;
  WATCHMAN = 3;
  USER_DEADLINE_EXPIRED = 4;
  // Add causes here as needed
}

enum ErrorTier {
  // Same as above
  UNUSED_DEFAULT_CATEGORY = 0;
  TIER0 = 1;
  INPUT = 2;
}

// Error types are - by design - restricted to being set exactly once at the
// error definition site. While they are useful, that means that they are enough
// on their own to represent all the error metadata we want. Until we figure out
// what exactly a more complete model looks like, error tags a mechanism that
// offers maximum flexibility - they can be added to any error anywhere.
//
// Feel free to continue using error types if you like.
enum ErrorTag {
  // Same as above
  UNUSED_DEFAULT_TAG = 0;
  STARLARK_FAIL = 1;
  STARLARK_STACK_OVERFLOW = 102;
  WATCHMAN_TIMEOUT = 2;
  HTTP = 3;
  // Client error (4xx).
  HTTP_CLIENT = 301;
  // Server error (5xx).
  HTTP_SERVER = 302;
  // gRPC protocol error between client and server from the client side.
  // - Protocol error (e.g. malformed frame, or too large frame)
  // - Transport error (e.g. connection closed)
  // - Not application error (e.g. bzl file not found)
  CLIENT_GRPC = 4;
  // Connect to buckd failed.
  DAEMON_CONNECT = 5;
  // Daemon is running another command.
  DAEMON_IS_BUSY = 501;
  // Daemon was preempted during preemptible command by another command.
  DAEMON_PREEMPTED = 502;
  // Too large gRPC message.
  GRPC_RESPONSE_MESSAGE_TOO_LARGE = 6;
  // `visibility`, `within_view`.
  VISIBILITY = 8;
  // Server stderr is empty.
  SERVER_STDERR_EMPTY = 11;
  // Server stderr indicates that the server panicked.
  SERVER_PANICKED = 12;
  // Server stack overflow.
  SERVER_STACK_OVERFLOW = 13;
  // SEGV.
  SERVER_SEGV = 14;
  // Jemalloc assertion failure.
  SERVER_JEMALLOC_ASSERT = 15;
  // The reason for server failure is unknown.
  SERVER_STDERR_UNKNOWN = 19;
  // Internal error in buck2. This is a bug.
  INTERNAL_ERROR = 21;
  // Artifact projection to a path that does not exist
  PROJECT_MISSING_PATH = 22;
  // The daemon reported that it was shutting down during the execution of this
  // command
  INTERRUPTED_BY_DAEMON_SHUTDOWN = 23;
  // The daemon couldn't be killed
  DAEMON_WONT_DIE_FROM_KILL = 24;
  // No valid internal or VPNless certs could be found
  NO_VALID_CERTS = 25;

  // Errors during buck2 install.
  INSTALL = 200;

  //// High level descriptions of the "phase" of the build during which the
  // error occurred
  ANALYSIS = 7;
  ANY_ACTION_EXECUTION = 2000;
  ANY_STARLARK_EVALUATION = 2001;

  ///// IO SECTION
  //
  // Indicates that the IO operation went through the standard system
  // interfaces, and not through EdenIO - note that the operation may still have
  // been accessing an Eden mount though
  IO_SYSTEM = 1000;
  // IO done on a source file in the repo
  IO_SOURCE = 1010;
  // The nature of the failure, designed after (but not identical to) Rust's
  // `io::ErrorKind`
  IO_NOT_FOUND = 1020;
  IO_PERMISSION_DENIED = 1021;
  IO_BROKEN_PIPE = 1022;
  IO_STORAGE_FULL = 1023;
  IO_EXECUTABLE_FILE_BUSY = 1024;
  IO_CONNECTION_ABORTED = 1025;
  IO_NOT_CONNECTED = 1026;
  IO_TIMEOUT = 1027;
}
