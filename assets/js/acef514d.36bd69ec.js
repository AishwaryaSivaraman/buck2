"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2100],{28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>l});var s=t(96540);const i={},r=s.createContext(i);function o(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(r.Provider,{value:n},e.children)}},75258:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"prelude/rules/robolectric_test","title":"robolectric_test","description":"name","source":"@site/../docs/prelude/rules/robolectric_test.md","sourceDirName":"prelude/rules","slug":"/prelude/rules/robolectric_test","permalink":"/docs/prelude/rules/robolectric_test","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"ruleSidebar","previous":{"title":"remote_file","permalink":"/docs/prelude/rules/remote_file"},"next":{"title":"rust_binary","permalink":"/docs/prelude/rules/rust_binary"}}');var i=t(74848),r=t(28453);t(56289);const o={},l="robolectric_test",a={},c=[{value:"name",id:"name",level:2},{value:"Parameters",id:"parameters",level:4}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"robolectric_test",children:"robolectric_test"})}),"\n",(0,i.jsx)(n.h2,{id:"name",children:"name"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"def name(\n    *,\n    name: str,\n    default_target_platform: None | str = ...,\n    target_compatible_with: list[str] = ...,\n    compatible_with: list[str] = ...,\n    exec_compatible_with: list[str] = ...,\n    visibility: list[str] = ...,\n    within_view: list[str] = ...,\n    metadata: OpaqueMetadata = ...,\n    tests: list[str] = ...,\n    modifiers: OpaqueMetadata = ...,\n    _android_toolchain: str = ...,\n    _apple_platforms: dict[str, str] = ...,\n    _build_only_native_code: bool = ...,\n    _exec_os_type: str = ...,\n    _inject_test_env: str = ...,\n    _is_building_android_binary: bool = ...,\n    _java_test_toolchain: str = ...,\n    _java_toolchain: str = ...,\n    _kotlin_toolchain: str = ...,\n    _remote_test_execution_toolchain: str = ...,\n    _test_toolchain: str = ...,\n    abi_generation_mode: None | str = ...,\n    android_optional_jars: None | list[str] = ...,\n    annotation_processing_tool: None | str = ...,\n    annotation_processor_deps: list[str] = ...,\n    annotation_processor_params: list[str] = ...,\n    annotation_processors: list[str] = ...,\n    contacts: list[str] = ...,\n    cxx_library_allowlist: list[str] = ...,\n    default_cxx_platform: None | str = ...,\n    default_host_platform: None | str = ...,\n    deps: list[str] = ...,\n    enable_used_classes: bool = ...,\n    env: dict[str, str] = ...,\n    exported_deps: list[str] = ...,\n    exported_provided_deps: list[str] = ...,\n    extra_arguments: list[str] = ...,\n    extra_kotlinc_arguments: list[str] = ...,\n    fork_mode: str = ...,\n    friend_paths: list[str] = ...,\n    incremental: bool = ...,\n    jar_postprocessor: None | str = ...,\n    java: None | str = ...,\n    java_agents: list[str] = ...,\n    java_version: None | str = ...,\n    javac: None | str = ...,\n    k2: bool = ...,\n    kotlin_compiler_plugins: dict[str, dict[str, str]] = ...,\n    labels: list[str] = ...,\n    language: None | str = ...,\n    licenses: list[str] = ...,\n    locales_for_binary_resources: list[str] = ...,\n    manifest: None | str = ...,\n    manifest_entries: dict[str, typing.Any] = ...,\n    manifest_file: None | str = ...,\n    maven_coords: None | str = ...,\n    never_mark_as_unused_dependency: None | bool = ...,\n    on_unused_dependencies: None | str = ...,\n    plugins: list[str | (str, list[str])] = ...,\n    preferred_density_for_binary_resources: None | str = ...,\n    proguard_config: None | str = ...,\n    provided_deps: list[str] = ...,\n    provided_deps_query: None | str = ...,\n    remote_execution: None | str | dict[str, None | bool | int | str | list[dict[str, str]] | dict[str, str | list[str]]] = ...,\n    remove_classes: list[str] = ...,\n    required_for_source_only_abi: bool = ...,\n    resource_stable_ids: None | str = ...,\n    resource_union_package: None | str = ...,\n    resources: list[str] = ...,\n    resources_root: None | str = ...,\n    robolectric_runtime_dependencies: list[str] = ...,\n    robolectric_runtime_dependency: None | str = ...,\n    run_test_separately: bool = ...,\n    runtime_deps: list[str] = ...,\n    source: None | str = ...,\n    source_abi_verification_mode: None | str = ...,\n    source_only_abi_deps: list[str] = ...,\n    srcs: list[str] = ...,\n    std_err_log_level: None | int | str = ...,\n    std_out_log_level: None | int | str = ...,\n    target: None | str = ...,\n    test_case_timeout_ms: None | int = ...,\n    test_class_names_file: None | str = ...,\n    test_rule_timeout_ms: None | int = ...,\n    test_type: None | str = ...,\n    unbundled_resources_root: None | str = ...,\n    use_cxx_libraries: None | bool = ...,\n    use_dependency_order_classpath: None | bool = ...,\n    use_jvm_abi_gen: None | bool = ...,\n    used_as_dependency_deprecated_do_not_use: bool = ...,\n    vm_args: list[str] = ...,\n) -> None\n"})}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.code,{children:"robolectric_test()"})," rule is used to define a set of ",(0,i.jsx)(n.code,{children:".java"})," files that contain tests to run via JUnit with Robolectric test runner. It extends from ",(0,i.jsx)(n.code,{children:"java_test()"})," rule."]}),"\n",(0,i.jsx)(n.h4,{id:"parameters",children:"Parameters"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"name"}),": name of the target"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"default_target_platform"}),": specifies the default target platform, used when no platforms are specified on the command line"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"target_compatible_with"}),": a list of constraints that are required to be satisfied for this target to be compatible with a configuration"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"compatible_with"}),": a list of constraints that are required to be satisfied for this target to be compatible with a configuration"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"exec_compatible_with"}),": a list of constraints that are required to be satisfied for this target to be compatible with an execution platform"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"visibility"}),": a list of visibility patterns restricting what targets can depend on this one"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"within_view"}),": a list of visibility patterns restricting what this target can depend on"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"metadata"}),": a key-value map of metadata associated with this target"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"tests"}),": a list of targets that provide tests for this one"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"modifiers"}),": an array of modifiers associated with this target"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"cxx_library_allowlist"}),": List of cxx_library targets to build, if use_cxx_libraries is true. This can be useful if some dependencies are Android-only and won't build for the test host platform."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"enable_used_classes"}),": Deprecated: for an experiment only, will be removed"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"extra_kotlinc_arguments"}),": List of additional arguments to pass into the Kotlin compiler."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"incremental"}),": Enables Kotlin incremental compilation."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"javac"}),": Specifies the Java compiler program to use for this rule. The value is a source path or an execution dep (e.g., //foo/bar",":bar",'). Overrides the value in "javac" in the "tools" section of ',(0,i.jsx)(n.code,{children:".buckconfig"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"k2"}),": Enables the Kotlin K2 compiler."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"kotlin_compiler_plugins"}),": Use this to specify ",(0,i.jsx)(n.a,{href:"https://kotlinlang.org/docs/reference/compiler-plugins.html",children:"Kotlin compiler plugins"})," to use when compiling this library. This takes a map, with each entry specify one plugin. Entry's key is plugin source path, and value is a map of plugin option key value pair. Unlike ",(0,i.jsx)(n.code,{children:"extra_kotlinc_arguments"}),", these can be ",(0,i.jsx)(n.em,{children:"source paths"}),", not just strings."]}),"\n",(0,i.jsxs)(n.p,{children:["A special option value is\n",(0,i.jsx)(n.code,{children:"__codegen_dir__"}),", in which case Buck will provide a default codegen folder's path as\noption value instead.\nE.g."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'fbcode/buck2/prelude/decls/jvm_common.bzl\nkotlin_compiler_plugins = {\n    "somePluginSourcePath": {\n        "plugin:somePluginId:somePluginOptionKey": "somePluginOptionValue",\n        "plugin:somePluginId:someDirectoryRelatedOptionKey": "__codegen_dir__",\n    },\n},\n\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Each plugin source path will be prefixed with ",(0,i.jsx)(n.code,{children:"-Xplugin="})," and passed as extra\narguments to the compiler. Plugin options will be appended after its plugin with ",(0,i.jsx)(n.code,{children:"-P"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["A specific example is, if you want to use ",(0,i.jsx)(n.a,{href:"https://github.com/Kotlin/kotlinx.serialization",children:"kotlinx.serialization"}),"\nwith ",(0,i.jsx)(n.code,{children:"kotlin_library()"}),", you need to specify ",(0,i.jsx)(n.code,{children:"kotlinx-serialization-compiler-plugin.jar"})," under ",(0,i.jsx)(n.code,{children:"kotlin_compiler_plugins"})," and ",(0,i.jsx)(n.code,{children:"kotlinx-serialization-runtime.jar"})," (which you may have to fetch from Maven) in your ",(0,i.jsx)(n.code,{children:"deps"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'\nkotlin_library(\n    name = "example",\n    srcs = glob(["*.kt"]),\n    deps = [\n        ":kotlinx-serialization-runtime",\n    ],\n    kotlin_compiler_plugins = {\n        # Likely copied from your $KOTLIN_HOME directory.\n        "kotlinx-serialization-compiler-plugin.jar": {},\n    },\n)\n\nprebuilt_jar(\n    name = "kotlinx-serialization-runtime",\n    binary_jar = ":kotlinx-serialization-runtime-0.10.0",\n)\n\n# Note you probably want to set\n# maven_repo=http://jcenter.bintray.com/ in your .buckconfig until\n# https://github.com/Kotlin/kotlinx.serialization/issues/64\n# is closed.\nremote_file(\n    name = "kotlinx-serialization-runtime-0.10.0",\n    out = "kotlinx-serialization-runtime-0.10.0.jar",\n    url = "mvn:org.jetbrains.kotlinx:kotlinx-serialization-runtime:jar:0.10.0",\n    sha1 = "23d777a5282c1957c7ce35946374fff0adab114c"\n)\n\n'})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"manifest"}),": An optional ",(0,i.jsx)(n.a,{href:"http://developer.android.com/guide/topics/manifest/manifest-intro.html",children:"Android Manifest"})," for the to declare any permissions or intents it may need or want to handle. May either be a file or an ",(0,i.jsx)(n.code,{children:"android_manifest()"})," target."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"robolectric_runtime_dependency"}),": Robolectric only runs in offline mode with buck. Specify the relative directory containing all the jars Robolectric uses at runtime."]}),"\n"]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);