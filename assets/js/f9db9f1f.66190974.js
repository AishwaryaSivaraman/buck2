"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8306],{28453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>l});var t=s(96540);const i={},r=t.createContext(i);function a(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(r.Provider,{value:n},e.children)}},28887:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"prelude/rules/apk_genrule","title":"apk_genrule","description":"name","source":"@site/../docs/prelude/rules/apk_genrule.md","sourceDirName":"prelude/rules","slug":"/prelude/rules/apk_genrule","permalink":"/docs/prelude/rules/apk_genrule","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"ruleSidebar","previous":{"title":"android_resource","permalink":"/docs/prelude/rules/android_resource"},"next":{"title":"apple_asset_catalog","permalink":"/docs/prelude/rules/apple_asset_catalog"}}');var i=s(74848),r=s(28453);s(56289);const a={},l="apk_genrule",o={},c=[{value:"name",id:"name",level:2},{value:"Parameters",id:"parameters",level:4},{value:"Details",id:"details",level:4}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"apk_genrule",children:"apk_genrule"})}),"\n",(0,i.jsx)(n.h2,{id:"name",children:"name"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"def name(\n    *,\n    name: str,\n    default_target_platform: None | str = ...,\n    target_compatible_with: list[str] = ...,\n    compatible_with: list[str] = ...,\n    exec_compatible_with: list[str] = ...,\n    visibility: list[str] = ...,\n    within_view: list[str] = ...,\n    metadata: OpaqueMetadata = ...,\n    tests: list[str] = ...,\n    modifiers: OpaqueMetadata = ...,\n    _android_toolchain: str = ...,\n    _apple_platforms: dict[str, str] = ...,\n    _build_only_native_code: bool = ...,\n    _exec_os_type: str = ...,\n    _genrule_toolchain: str = ...,\n    _java_toolchain: str = ...,\n    aab: None | str = ...,\n    always_print_stderr: bool = ...,\n    apk: None | str = ...,\n    bash: None | str = ...,\n    cacheable: None | bool = ...,\n    cmd: None | str = ...,\n    cmd_exe: None | str = ...,\n    contacts: list[str] = ...,\n    default_host_platform: None | str = ...,\n    default_outs: None | list[str] = ...,\n    enable_sandbox: None | bool = ...,\n    environment_expansion_separator: None | str = ...,\n    is_cacheable: bool = ...,\n    keystore: None | str = ...,\n    labels: list[str] = ...,\n    licenses: list[str] = ...,\n    metadata_env_var: None | str = ...,\n    metadata_path: None | str = ...,\n    need_android_tools: bool = ...,\n    no_outputs_cleanup: bool = ...,\n    out: None | str = ...,\n    outs: None | dict[str, list[str]] = ...,\n    remote: None | bool = ...,\n    remote_execution_dependencies: list[dict[str, str]] = ...,\n    srcs: list[str] | dict[str, str] = ...,\n    type: str = ...,\n    use_derived_apk: bool = ...,\n    weight: None | int = ...,\n) -> None\n"})}),"\n",(0,i.jsxs)(n.p,{children:["An ",(0,i.jsx)(n.code,{children:"apk_genrule()"})," rule is used to post-process an APK. What separates an apk_genrule from a genrule is apk_genrules are known by BUCK to produce APKs, so commands like ",(0,i.jsx)(n.code,{children:"buck install"})," or ",(0,i.jsx)(n.code,{children:"buck uninstall"})," still work. Additionally, ",(0,i.jsx)(n.code,{children:"apk_genrule()"})," rules can be inputs to other ",(0,i.jsx)(n.code,{children:"apk_genrule()"})," rules."]}),"\n",(0,i.jsx)(n.h4,{id:"parameters",children:"Parameters"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"name"}),": name of the target"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"default_target_platform"}),": specifies the default target platform, used when no platforms are specified on the command line"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"target_compatible_with"}),": a list of constraints that are required to be satisfied for this target to be compatible with a configuration"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"compatible_with"}),": a list of constraints that are required to be satisfied for this target to be compatible with a configuration"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"exec_compatible_with"}),": a list of constraints that are required to be satisfied for this target to be compatible with an execution platform"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"visibility"}),": a list of visibility patterns restricting what targets can depend on this one"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"within_view"}),": a list of visibility patterns restricting what this target can depend on"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"metadata"}),": a key-value map of metadata associated with this target"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"tests"}),": a list of targets that provide tests for this one"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"modifiers"}),": an array of modifiers associated with this target"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"aab"}),": The input ",(0,i.jsx)(n.code,{children:"android_binary()"})," rule. The path to the AAB can be accessed with the ",(0,i.jsx)(n.code,{children:"$AAB"})," shell variable. Only one of ",(0,i.jsx)(n.code,{children:"apk"})," or ",(0,i.jsx)(n.code,{children:"aab"})," can be provided."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"apk"}),": The input ",(0,i.jsx)(n.code,{children:"android_binary()"})," rule. The path to the APK can be accessed with the ",(0,i.jsx)(n.code,{children:"$APK"})," shell variable. Only one of ",(0,i.jsx)(n.code,{children:"apk"})," or ",(0,i.jsx)(n.code,{children:"aab"})," can be provided."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"bash"}),": A platform-specific version of the shell command parameter ",(0,i.jsx)(n.code,{children:"cmd"}),". It runs on Linux and UNIX systems\u2014including OSX\u2014on which ",(0,i.jsx)(n.code,{children:"bash"})," is installed. It has a higher priority than ",(0,i.jsx)(n.code,{children:"cmd"}),". The ",(0,i.jsx)(n.code,{children:"bash"})," argument is run with ",(0,i.jsx)(n.code,{children:"/usr/bin/env bash -c"}),". It has access to the same set of macros and variables as the ",(0,i.jsx)(n.code,{children:"cmd"})," argument."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"cmd"}),": The shell command to run to generate the output file. It is the fallback for ",(0,i.jsx)(n.code,{children:"bash"})," and ",(0,i.jsx)(n.code,{children:"cmd_exe"})," arguments. The following environment variables are populated by Buck and available to the shell command. They are accessed using the syntax:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"${<variable>}\n"})}),"\n",(0,i.jsx)(n.p,{children:"Example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"${SRCS}\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"${SRCS}"})}),"\n",(0,i.jsxs)(n.p,{children:["A string expansion of the ",(0,i.jsx)(n.code,{children:"srcs"})," argument delimited\nby the ",(0,i.jsx)(n.code,{children:"environment_expansion_separator"})," argument\nwhere each element of ",(0,i.jsx)(n.code,{children:"srcs"})," will be translated\ninto a relative path."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"${SRCDIR}"})}),"\n",(0,i.jsx)(n.p,{children:"The relative path to a directory to which sources are copied\nprior to running the command."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"${OUT}"})}),"\n",(0,i.jsxs)(n.p,{children:["The output file or directory for the ",(0,i.jsx)(n.code,{children:"genrule()"}),".\nThis variable will have whatever value is specified by\nthe ",(0,i.jsx)(n.code,{children:"out"})," argument if not using named outputs. If\nusing named outputs, this variable will be the output directory."]}),"\n",(0,i.jsx)(n.p,{children:"The value should be a valid filepath. The semantics of the shell\ncommand determine whether this filepath is treated as a file or a\ndirectory. If the filepath is a directory, then the shell command\nneeds to create it if not using named outputs. Otherwise, it will\nbe automatically created. All outputs (directories and files) must\nbe readable, writable, and (in the case of directories) executable\nby the current user."}),"\n",(0,i.jsx)(n.p,{children:"The file or directory specified by this variable must always\nbe written by this command. If not, the execution of this\nrule will be considered a failure, halting the build process."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"${TMP}"})}),"\n",(0,i.jsx)(n.p,{children:"A temporary directory which can be used for intermediate\nresults and will not be bundled into the output."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"cmd_exe"}),": A platform-specific version of the shell command parameter ",(0,i.jsx)(n.code,{children:"cmd"}),". It runs on Windows and has a higher priority than ",(0,i.jsx)(n.code,{children:"cmd"}),". The ",(0,i.jsx)(n.code,{children:"cmd_exe"})," argument is run with ",(0,i.jsx)(n.code,{children:"cmd.exe /v:off /c"}),". It has access to the same set of macros and variables as the ",(0,i.jsx)(n.code,{children:"cmd"})," argument."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"environment_expansion_separator"}),": The delimiter between paths in environment variables, such as SRCS, that can contain multiple paths. It can be useful to specify this parameter if the paths could contain spaces."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"out"}),": The name of the output file or directory. The complete path to this argument is provided to the shell command through the ",(0,i.jsx)(n.code,{children:"OUT"})," environment variable. Only one of ",(0,i.jsx)(n.code,{children:"out"})," or ",(0,i.jsx)(n.code,{children:"outs"})," may be present."]}),"\n",(0,i.jsx)(n.p,{children:"For an apk_genrule the output should be a '.apk' or '.aab' file."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"srcs"}),": Either a list or a map of the source files which Buck makes available to the shell command at the path in the ",(0,i.jsx)(n.code,{children:"SRCDIR"})," environment variable. If you specify a list, the source files are the names in the list. If you specify a map, the source files are made available as the names in the keys of the map, where the values of the map are the original source file names."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"weight"}),": How many local slots these genrule should take when executing locally."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"details",children:"Details"}),"\n",(0,i.jsx)(n.p,{children:"Examples:"}),"\n",(0,i.jsxs)(n.p,{children:["Here is an example of a couple ",(0,i.jsx)(n.code,{children:"apk_genrule()"})," open up an APK, do\nsome super signing, and then zipalign that APK again."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"\n\n# Building this rule will produce a file named messenger.apk.\nandroid_binary(\n  name = 'messenger',\n  manifest = 'AndroidManifest.xml',\n  target = 'Google Inc.:Google APIs:16',\n  keystore = '//keystores:prod',\n  package_type = 'release',\n  proguard_config = 'proguard.cfg',\n  deps = [\n    ':res',\n    ':src',\n  ],\n)\n\napk_genrule(\n  name = 'messenger_super_sign_unalign',\n  apk = ':messenger',\n  bash = '$(exe //java/com/facebook/sign:super_sign) --input $APK --output $OUT',\n  cmd_exe = '$(exe //java/com/facebook/sign:super_sign) --input %APK% --output %OUT%',\n  out = 'messenger_super_sign_unalign.apk',\n)\n\napk_genrule(\n  name = 'messenger_super_sign',\n  apk = ':messenger_super_sign_unalign',\n  bash = '$ANDROID_HOME/tools/zipalign -f 4 $APK $OUT',\n  cmd_exe = '%ANDROID_HOME%\\tools\\zipalign -f 4 %APK% %OUT%',\n  out = 'messenger_super_sign.apk',\n)\n\n\n"})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);