"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1522],{28453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>o});var s=n(96540);const i={},a=s.createContext(i);function r(e){const t=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(a.Provider,{value:t},e.children)}},63416:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"prelude/rules/android_instrumentation_apk","title":"android_instrumentation_apk","description":"name","source":"@site/../docs/prelude/rules/android_instrumentation_apk.md","sourceDirName":"prelude/rules","slug":"/prelude/rules/android_instrumentation_apk","permalink":"/docs/prelude/rules/android_instrumentation_apk","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"ruleSidebar","previous":{"title":"android_bundle","permalink":"/docs/prelude/rules/android_bundle"},"next":{"title":"android_instrumentation_test","permalink":"/docs/prelude/rules/android_instrumentation_test"}}');var i=n(74848),a=n(28453);n(56289);const r={},o="android_instrumentation_apk",l={},d=[{value:"name",id:"name",level:2},{value:"Parameters",id:"parameters",level:4},{value:"Details",id:"details",level:4}];function c(e){const t={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"android_instrumentation_apk",children:"android_instrumentation_apk"})}),"\n",(0,i.jsx)(t.h2,{id:"name",children:"name"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:"def name(\n    *,\n    name: str,\n    default_target_platform: None | str = ...,\n    target_compatible_with: list[str] = ...,\n    compatible_with: list[str] = ...,\n    exec_compatible_with: list[str] = ...,\n    visibility: list[str] = ...,\n    within_view: list[str] = ...,\n    metadata: OpaqueMetadata = ...,\n    tests: list[str] = ...,\n    modifiers: OpaqueMetadata = ...,\n    _android_toolchain: str = ...,\n    _apple_platforms: dict[str, str] = ...,\n    _dex_toolchain: str = ...,\n    _exec_os_type: str = ...,\n    _is_building_android_binary: bool = ...,\n    _is_force_single_cpu: bool = ...,\n    _is_force_single_default_cpu: bool = ...,\n    _java_toolchain: str = ...,\n    apk: str,\n    contacts: list[str] = ...,\n    cpu_filters: list[str] = ...,\n    default_host_platform: None | str = ...,\n    deps: list[str] = ...,\n    disable_pre_dex: bool = ...,\n    enable_bootstrap_dexes: bool = ...,\n    includes_vector_drawables: bool = ...,\n    is_self_instrumenting: bool = ...,\n    labels: list[str] = ...,\n    licenses: list[str] = ...,\n    manifest: None | str = ...,\n    manifest_skeleton: None | str = ...,\n    min_sdk_version: None | int = ...,\n    native_library_merge_map: None | dict[str, list[str]] = ...,\n    native_library_merge_sequence: None | list = ...,\n    preprocess_java_classes_bash: None | str = ...,\n    preprocess_java_classes_cmd: None | str = ...,\n    preprocess_java_classes_deps: list[str] = ...,\n    primary_dex_patterns: list[str] = ...,\n    use_split_dex: None | bool = ...,\n) -> None\n"})}),"\n",(0,i.jsxs)(t.p,{children:["An ",(0,i.jsx)(t.code,{children:"android_instrumentation_apk()"})," rule is used to generate an Android Instrumentation APK."]}),"\n",(0,i.jsx)(t.h4,{id:"parameters",children:"Parameters"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"name"}),": name of the target"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"default_target_platform"}),": specifies the default target platform, used when no platforms are specified on the command line"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"target_compatible_with"}),": a list of constraints that are required to be satisfied for this target to be compatible with a configuration"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"compatible_with"}),": a list of constraints that are required to be satisfied for this target to be compatible with a configuration"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"exec_compatible_with"}),": a list of constraints that are required to be satisfied for this target to be compatible with an execution platform"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"visibility"}),": a list of visibility patterns restricting what targets can depend on this one"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"within_view"}),": a list of visibility patterns restricting what this target can depend on"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"metadata"}),": a key-value map of metadata associated with this target"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"tests"}),": a list of targets that provide tests for this one"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"modifiers"}),": an array of modifiers associated with this target"]}),"\n"]}),"\n",(0,i.jsx)(t.h4,{id:"details",children:"Details"}),"\n",(0,i.jsxs)(t.p,{children:["Android's ",(0,i.jsx)(t.a,{href:"http://developer.android.com/tools/testing/testing_android.html",children:"Testing Fundamentals"}),' documentation includes a diagram that shows\nthe relationship between an "application package" and a "test package"\nwhen running a test. This rule corresponds to a test package. Note\nthat a test package has an interesting quirk where it is ',(0,i.jsx)(t.em,{children:"compiled\nagainst"})," an application package, but ",(0,i.jsx)(t.em,{children:"must not include"})," the\nresources or Java classes of the application package. Therefore, this\nclass takes responsibility for making sure the appropriate bits are\nexcluded. Failing to do so will generate mysterious runtime errors\nwhen running the test."]}),"\n",(0,i.jsx)(t.p,{children:"Examples:"}),"\n",(0,i.jsxs)(t.p,{children:["Here is an example of an ",(0,i.jsx)(t.code,{children:"android_instrumentation_apk()"})," rule that tests an ",(0,i.jsx)(t.code,{children:"android_binary()"}),", and depends on a test\npackage."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"\nandroid_library(\n  name = 'test',\n  srcs = glob(['test/**/*.java']),\n)\n\nandroid_binary(\n  name = 'messenger',\n  manifest = 'AndroidManifest.xml',\n  keystore = '//keystores:prod',\n  package_type = 'release',\n  proguard_config = 'proguard.cfg',\n  deps = [\n    ...\n  ],\n)\n\n# Building this rule will produce a file named messenger_test.apk\nandroid_instrumentation_apk(\n  name = 'messenger_test',\n  manifest = 'AndroidInstrumentationManifest.xml',\n  apk = ':messenger',\n  deps = [\n    ':test',\n  ],\n)\n\n"})})]})}function p(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}}}]);