"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3219],{28453:(e,t,n)=>{n.d(t,{R:()=>l,x:()=>o});var i=n(96540);const s={},r=i.createContext(s);function l(e){const t=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),i.createElement(r.Provider,{value:t},e.children)}},80276:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"prelude/rules/python_binary","title":"python_binary","description":"name","source":"@site/../docs/prelude/rules/python_binary.md","sourceDirName":"prelude/rules","slug":"/prelude/rules/python_binary","permalink":"/docs/prelude/rules/python_binary","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"ruleSidebar","previous":{"title":"prebuilt_python_library","permalink":"/docs/prelude/rules/prebuilt_python_library"},"next":{"title":"python_bootstrap_binary","permalink":"/docs/prelude/rules/python_bootstrap_binary"}}');var s=n(74848),r=n(28453);n(56289);const l={},o="python_binary",a={},d=[{value:"name",id:"name",level:2},{value:"Parameters",id:"parameters",level:4},{value:"Details",id:"details",level:4}];function c(e){const t={code:"code",em:"em",h1:"h1",h2:"h2",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"python_binary",children:"python_binary"})}),"\n",(0,s.jsx)(t.h2,{id:"name",children:"name"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:"def name(\n    *,\n    name: str,\n    default_target_platform: None | str = ...,\n    target_compatible_with: list[str] = ...,\n    compatible_with: list[str] = ...,\n    exec_compatible_with: list[str] = ...,\n    visibility: list[str] = ...,\n    within_view: list[str] = ...,\n    metadata: OpaqueMetadata = ...,\n    tests: list[str] = ...,\n    modifiers: OpaqueMetadata = ...,\n    _apple_platforms: dict[str, str] = ...,\n    _build_info: dict[str, typing.Any] = ...,\n    _create_manifest_for_source_dir: str = ...,\n    _cxx_hacks: str = ...,\n    _cxx_toolchain: str = ...,\n    _exec_os_type: str = ...,\n    _package_remotely: bool = ...,\n    _python_toolchain: str = ...,\n    _target_os_type: str = ...,\n    allow_cache_upload: None | bool = ...,\n    anonymous_link_groups: bool = ...,\n    auto_link_groups: bool = ...,\n    base_module: None | str = ...,\n    binary_linker_flags: list[str] = ...,\n    bolt_flags: list[str] = ...,\n    bolt_profile: None | str = ...,\n    build_args: list[str] = ...,\n    compile: None | bool = ...,\n    compiler_flags: list[str] = ...,\n    constraint_overrides: list[str] = ...,\n    contacts: list[str] = ...,\n    coverage_instrumentation_compiler_flags: list[str] = ...,\n    cuda_compile_style: str = ...,\n    cxx_main: str = ...,\n    cxx_runtime_type: None | str = ...,\n    deduplicate_merged_link_roots: None | bool = ...,\n    default_host_platform: None | str = ...,\n    default_platform: None | str = ...,\n    defaults: dict[str, str] = ...,\n    deps: list[str] = ...,\n    deps_query: None | str = ...,\n    devirt_enabled: bool = ...,\n    distributed_thinlto_partial_split_dwarf: bool = ...,\n    dummy_omnibus: None | str = ...,\n    enable_distributed_thinlto: bool = ...,\n    executable_deps: list[str] = ...,\n    executable_name: None | str = ...,\n    exported_needs_coverage_instrumentation: bool = ...,\n    extension: None | str = ...,\n    fat_lto: bool = ...,\n    focused_list_target: None | str = ...,\n    frameworks: list[str] = ...,\n    header_namespace: None | str = ...,\n    headers: list[str] | dict[str, str] = ...,\n    headers_as_raw_headers_mode: None | str = ...,\n    include_directories: list[str] = ...,\n    inplace_build_args: list[str] = ...,\n    labels: list[str] = ...,\n    lang_compiler_flags: dict[str, list[str]] = ...,\n    lang_platform_compiler_flags: dict[str, list[(str, list[str])]] = ...,\n    lang_platform_preprocessor_flags: dict[str, list[(str, list[str])]] = ...,\n    lang_preprocessor_flags: dict[str, list[str]] = ...,\n    libraries: list[str] = ...,\n    licenses: list[str] = ...,\n    link_deps_query_whole: bool = ...,\n    link_execution_preference: None | str = ...,\n    link_group: None | str = ...,\n    link_group_deps: list[str] = ...,\n    link_group_map: None | str | list[(str, list[(None | str | list[None | str], str, None | str | list[str], None | str)], None | dict[str, typing.Any])] = ...,\n    link_group_min_binary_node_count: None | int = ...,\n    link_group_public_deps_label: None | str = ...,\n    link_ordering: None | str = ...,\n    link_style: str = ...,\n    link_whole: bool = ...,\n    linker_extra_outputs: list[str] = ...,\n    linker_flags: list[str] = ...,\n    main: None | str = ...,\n    main_function: None | str = ...,\n    main_module: None | str = ...,\n    make_py_package: None | str = ...,\n    manifest_module_entries: None | dict[str, list[str] | dict[str, typing.Any]] = ...,\n    native_link_strategy: None | str = ...,\n    opt_by_default_enabled: bool = ...,\n    package_split_dwarf_dwp: bool = ...,\n    package_style: None | str = ...,\n    par_style: None | str = ...,\n    platform: None | str = ...,\n    platform_compiler_flags: list[(str, list[str])] = ...,\n    platform_deps: list[(str, list[str])] = ...,\n    platform_headers: list[(str, list[str] | dict[str, str])] = ...,\n    platform_linker_flags: list[(str, list[str])] = ...,\n    platform_override: None | str = ...,\n    platform_preload_deps: list[(str, list[str])] = ...,\n    platform_preprocessor_flags: list[(str, list[str])] = ...,\n    platform_srcs: list[(str, list[str | (str, list[str])])] = ...,\n    post_linker_flags: list[str] = ...,\n    post_platform_linker_flags: list[(str, list[str])] = ...,\n    precompiled_header: None | str = ...,\n    prefer_stripped_native_objects: bool = ...,\n    prefer_stripped_objects: bool = ...,\n    prefix_header: None | str = ...,\n    preload_deps: list[str] = ...,\n    preprocessor_flags: list[str] = ...,\n    py_version_for_type_checking: None | str = ...,\n    raw_headers: list[str] = ...,\n    raw_headers_as_headers_mode: None | str = ...,\n    repl_main: None | str = ...,\n    repl_only_deps: list[str] = ...,\n    resources: list[str] | dict[str, str] = ...,\n    run_with_inplace: bool = ...,\n    runtime_bundle: None | str = ...,\n    runtime_bundle_full: bool = ...,\n    runtime_dependency_handling: None | str = ...,\n    runtime_env: None | dict[str, str] = ...,\n    separate_debug_info: bool = ...,\n    shard_typing: None | bool = ...,\n    standalone_build_args: list[str] = ...,\n    static_extension_finder: str = ...,\n    static_extension_utils: str = ...,\n    strip_libpar: str = ...,\n    strip_stapsdt: bool = ...,\n    thin_lto: bool = ...,\n    typing: bool = ...,\n    use_anon_target_for_analysis: bool = ...,\n    use_header_units: bool = ...,\n    use_oss_python: bool = ...,\n    use_rust_make_par: bool = ...,\n    version_selections: dict[str, str] = ...,\n    version_universe: None | str = ...,\n    weak_framework_names: list[str] = ...,\n    zip_safe: None | bool = ...,\n) -> None\n"})}),"\n",(0,s.jsxs)(t.p,{children:["A ",(0,s.jsx)(t.code,{children:"python_binary()"})," rule is used to build an executable Python package that includes Python sources and resources from all transitive dependencies."]}),"\n",(0,s.jsx)(t.h4,{id:"parameters",children:"Parameters"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"name"}),": name of the target"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"default_target_platform"}),": specifies the default target platform, used when no platforms are specified on the command line"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"target_compatible_with"}),": a list of constraints that are required to be satisfied for this target to be compatible with a configuration"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"compatible_with"}),": a list of constraints that are required to be satisfied for this target to be compatible with a configuration"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"exec_compatible_with"}),": a list of constraints that are required to be satisfied for this target to be compatible with an execution platform"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"visibility"}),": a list of visibility patterns restricting what targets can depend on this one"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"within_view"}),": a list of visibility patterns restricting what this target can depend on"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"metadata"}),": a key-value map of metadata associated with this target"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"tests"}),": a list of targets that provide tests for this one"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"modifiers"}),": an array of modifiers associated with this target"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"_build_info"}),": Build info that is passed along here will be late-stamped into a fb_build_info section on the output binary"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"allow_cache_upload"}),": Whether to allow uploading the output of this rule to be uploaded to cache when the action is executed locally if the configuration allows (i.e. there is a cache configured and the client has permission to write to it)."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"base_module"}),": The package in which the main module should reside in its final location in the binary. If unset, Buck uses the project-relative directory that contains the BUCK file."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"deduplicate_merged_link_roots"}),": When linking multiple top-level binaries with the ",(0,s.jsx)(t.code,{children:"merged"})," ",(0,s.jsx)(t.code,{children:".buckconfig"}),", coalesce root link rules which are identical across independent merged links."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"deps"}),": A list of ",(0,s.jsx)(t.code,{children:"python_library()"})," rules that specify Python modules to include in the binary \u2014 including all transitive dependencies of these rules."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"labels"}),": Set of arbitrary strings which allow you to annotate a ",(0,s.jsx)(t.code,{children:"build rule"})," with tags that can be searched for over an entire dependency tree using ",(0,s.jsx)(t.code,{children:"buck query()"})," ."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"link_group_deps"}),": Additional targets to traverse when building link groups, but which should not be direct dependencies of the main executable."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"link_group_public_deps_label"}),': Surface nodes with this label as "public" nodes in the main executable when linking with with link groups.']}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"linker_flags"}),": Additional linker flags that should be applied to any linking which is specific to this rule. Note that whether these flags are used is dependent on the native link strategy selected in ",(0,s.jsx)(t.code,{children:".buckconfig"})," and currently applies only to the merged ",(0,s.jsx)(t.code,{children:".buckconfig"}),"; the ",(0,s.jsx)(t.code,{children:"separate"})," link strategy pulls in shared libraries that are linked in the context of the rules that own them, such as ",(0,s.jsx)(t.code,{children:"cxx_library()"}),"."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"main"}),": The Python file which serves as the entry point for the binary. The interpreter initiates execution of the binary with the code in this file."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"main_function"}),": Name of a Python function that will serve as the main entry point of the binary. The name is either a fully qualified name like ",(0,s.jsx)(t.code,{children:"foo.bar.baz"})," or it starts with a ",(0,s.jsx)(t.code,{children:"."})," like ",(0,s.jsx)(t.code,{children:".bar.baz"}),", in which case it is relative to the package containing the target. This should usually be a function defined within one of the dependencies of this target. This attribute should be preferred over ",(0,s.jsx)(t.code,{children:"main_module"})," or ",(0,s.jsx)(t.code,{children:"main"}),", and it is an error to specify more than one of these."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"main_module"}),": The python module that should be the entry point of the binary. This should be a module name within a ",(0,s.jsx)(t.code,{children:"python_library"})," that this binary depends on. Note that module names take ",(0,s.jsx)(t.code,{children:"base_module"})," of the library into account. This property is mutually exclusive with ",(0,s.jsx)(t.code,{children:"main"}),", and should be preferred to ",(0,s.jsx)(t.code,{children:"main"}),", which is deprecated."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"manifest_module_entries"}),": If present, it should be a ",(0,s.jsx)(t.code,{children:"string"})," -> ",(0,s.jsx)(t.code,{children:"entry"})," mapping that gets generated into a ",(0,s.jsx)(t.code,{children:"__manifest__"})," module in the executable. Top level string keys will be the names of variables in this module (so they must be valid Python identifiers). An ",(0,s.jsx)(t.code,{children:"entry"})," can be a list of ",(0,s.jsx)(t.code,{children:"string"}),"s, or a further ",(0,s.jsx)(t.code,{children:"string"}),"-keyed dictionary."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"package_style"}),": Used to override the global packaging style that is set in ",(0,s.jsx)(t.code,{children:"["}),".buckconfig",(0,s.jsx)(t.code,{children:" ]"}),"."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"platform"}),": The name of the Python platform ",(0,s.jsx)(t.em,{children:"flavor"})," to build against by default as defined in the buckconfig#",(0,s.jsx)(t.code,{children:"python"}),"section of ",(0,s.jsx)(t.code,{children:".buckconfig"}),"."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"preload_deps"}),": A list of C/C++ library dependencies that need to be loaded before any other libraries when the PEX starts up. This requires dynamic loader support, such as ",(0,s.jsx)(t.code,{children:"LD_PRELOAD"}),", found on most systems. This list is order- sensitive and the preload libraries listed here are passed down to the dynamic linker in the same order."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"py_version_for_type_checking"}),": This option will force the type checker to perform checking under a specific version of Python interpreter."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"shard_typing"}),": Determines if sharding should be enabled on a given target."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"typing"}),": Determines whether to perform type checking on the given target. Default is False."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"version_selections"}),": A mapping from library name to desired version. Versioned dependencies from the entire dependency tree with the given name will be used at the specified version, if available. Versioned libraries that are unspecified will be used at their respective default version."]}),"\n"]}),"\n",(0,s.jsx)(t.h4,{id:"details",children:"Details"}),"\n",(0,s.jsx)(t.p,{children:"Examples:"}),"\n",(0,s.jsx)(t.p,{children:"Build an executable from the Python files in the BUCK directory."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"\n# BUCK\n\npython_binary(\n  name = 'tailer',\n  main_module = 'tailer',\n  deps = [\n    ':tailerutils',\n  ],\n)\n\npython_library(\n  name = 'tailerutils',\n  # The main module, tailer.py, is specified here.\n  # (Separated out from the glob pattern for clarity.)\n  srcs = glob(['tailer.py', '*.py']),\n)\n\n"})})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}}}]);