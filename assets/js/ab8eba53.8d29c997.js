"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1036],{28453:(e,t,s)=>{s.d(t,{R:()=>n,x:()=>l});var i=s(96540);const r={},a=i.createContext(r);function n(e){const t=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:n(e.components),i.createElement(a.Provider,{value:t},e.children)}},54512:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>n,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"prelude/rules/ocaml_library","title":"ocaml_library","description":"name","source":"@site/../docs/prelude/rules/ocaml_library.md","sourceDirName":"prelude/rules","slug":"/prelude/rules/ocaml_library","permalink":"/docs/prelude/rules/ocaml_library","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"ruleSidebar","previous":{"title":"ocaml_binary","permalink":"/docs/prelude/rules/ocaml_binary"},"next":{"title":"ocaml_object","permalink":"/docs/prelude/rules/ocaml_object"}}');var r=s(74848),a=s(28453);s(56289);const n={},l="ocaml_library",o={},c=[{value:"name",id:"name",level:2},{value:"Parameters",id:"parameters",level:4},{value:"Details",id:"details",level:4}];function d(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"ocaml_library",children:"ocaml_library"})}),"\n",(0,r.jsx)(t.h2,{id:"name",children:"name"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:"def name(\n    *,\n    name: str,\n    default_target_platform: None | str = ...,\n    target_compatible_with: list[str] = ...,\n    compatible_with: list[str] = ...,\n    exec_compatible_with: list[str] = ...,\n    visibility: list[str] = ...,\n    within_view: list[str] = ...,\n    metadata: OpaqueMetadata = ...,\n    tests: list[str] = ...,\n    modifiers: OpaqueMetadata = ...,\n    _apple_platforms: dict[str, str] = ...,\n    _cxx_toolchain: str = ...,\n    _ocaml_toolchain: str = ...,\n    bytecode_only: bool = ...,\n    compiler_flags: list[str] = ...,\n    contacts: list[str] = ...,\n    default_host_platform: None | str = ...,\n    deps: list[str] = ...,\n    labels: list[str] = ...,\n    licenses: list[str] = ...,\n    linker_flags: list[str] = ...,\n    native_plugin: bool = ...,\n    ocamldep_flags: list[str] = ...,\n    platform_compiler_flags: list[(str, list[str])] = ...,\n    platform_deps: list[(str, list[str])] = ...,\n    srcs: None | list[str] | dict[str, str] = ...,\n    warnings_flags: None | str = ...,\n) -> None\n"})}),"\n",(0,r.jsx)(t.p,{children:"A ocaml_library() rule builds a native and a bytecode libraries from the supplied set of OCaml source files and dependencies."}),"\n",(0,r.jsx)(t.h4,{id:"parameters",children:"Parameters"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"name"}),": name of the target"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"default_target_platform"}),": specifies the default target platform, used when no platforms are specified on the command line"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"target_compatible_with"}),": a list of constraints that are required to be satisfied for this target to be compatible with a configuration"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"compatible_with"}),": a list of constraints that are required to be satisfied for this target to be compatible with a configuration"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"exec_compatible_with"}),": a list of constraints that are required to be satisfied for this target to be compatible with an execution platform"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"visibility"}),": a list of visibility patterns restricting what targets can depend on this one"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"within_view"}),": a list of visibility patterns restricting what this target can depend on"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"metadata"}),": a key-value map of metadata associated with this target"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"tests"}),": a list of targets that provide tests for this one"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"modifiers"}),": an array of modifiers associated with this target"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"compiler_flags"}),": The set of additional compiler flags to pass to ocaml compiler. It supports specifying ppx (see ",(0,r.jsx)(t.a,{href:"https://github.com/facebook/buck/tree/dev/test/com/facebook/buck/features/ocaml/testdata/compiler_flag_macros/BUCK.fixture",children:"for example"}),")."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"deps"}),": The set of dependencies of this rule. It could include references to ocaml_library and cxx_library rules."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"platform_deps"}),": Platform specific dependencies. These should be specified as a list of pairs where the first element is an un-anchored regex (in java.util.regex.Pattern syntax) against which the platform name is matched, and the second element is a list of dependencies (same format as ",(0,r.jsx)(t.code,{children:"deps"}),") that are exported if the platform matches the regex. See ",(0,r.jsx)(t.code,{children:"deps"})," for more information."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"srcs"}),": The set of source files to be compiled by this rule. It supports *.ml, *.mli, *.mly, *.mll, and *.c files. (see  ",(0,r.jsx)(t.a,{href:"https://github.com/facebook/buck/tree/dev/test/com/facebook/buck/features/ocaml/testdata/ocaml/clib/BUCK.fixture",children:"this test"}),"  as C interop example and ",(0,r.jsx)(t.a,{href:"https://github.com/facebook/buck/tree/dev/test/com/facebook/buck/features/ocaml/testdata/ocaml/calc/BUCK.fixture",children:"this test"}),"  as parser and lexer example)."]}),"\n"]}),"\n",(0,r.jsx)(t.h4,{id:"details",children:"Details"}),"\n",(0,r.jsx)(t.p,{children:"Note: Buck is currently tested with 4.X OCaml series."}),"\n",(0,r.jsx)(t.p,{children:"Examples:"}),"\n",(0,r.jsxs)(t.p,{children:["For more examples, check out our ",(0,r.jsx)(t.a,{href:"https://github.com/facebook/buck/tree/dev/test/com/facebook/buck/features/ocaml/testdata/",children:"integration tests"}),"."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"\nocaml_library(\n  name='greeting',\n  srcs=[\n    'greeting.ml',\n  ],\n  deps=[\n    ':join',\n  ],\n)\n\n"})})]})}function h(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);