"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2676],{18902:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"prelude/rules/java_library","title":"java_library","description":"name","source":"@site/../docs/prelude/rules/java_library.md","sourceDirName":"prelude/rules","slug":"/prelude/rules/java_library","permalink":"/docs/prelude/rules/java_library","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"ruleSidebar","previous":{"title":"java_binary","permalink":"/docs/prelude/rules/java_binary"},"next":{"title":"java_plugin","permalink":"/docs/prelude/rules/java_plugin"}}');var t=s(74848),r=s(28453);s(56289);const a={},o="java_library",l={},d=[{value:"name",id:"name",level:2},{value:"Parameters",id:"parameters",level:4},{value:"Details",id:"details",level:4}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"java_library",children:"java_library"})}),"\n",(0,t.jsx)(n.h2,{id:"name",children:"name"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"def name(\n    *,\n    name: str,\n    default_target_platform: None | str = ...,\n    target_compatible_with: list[str] = ...,\n    compatible_with: list[str] = ...,\n    exec_compatible_with: list[str] = ...,\n    visibility: list[str] = ...,\n    within_view: list[str] = ...,\n    metadata: OpaqueMetadata = ...,\n    tests: list[str] = ...,\n    modifiers: OpaqueMetadata = ...,\n    _apple_platforms: dict[str, str] = ...,\n    _build_only_native_code: bool = ...,\n    _dex_min_sdk_version: None | int = ...,\n    _dex_toolchain: str = ...,\n    _exec_os_type: str = ...,\n    _is_building_android_binary: bool = ...,\n    _java_toolchain: str = ...,\n    abi_generation_mode: None | str = ...,\n    annotation_processor_deps: list[str] = ...,\n    annotation_processor_params: list[str] = ...,\n    annotation_processors: list[str] = ...,\n    attrs_validators: None | list[str] = ...,\n    concat_resources: bool = ...,\n    contacts: list[str] = ...,\n    default_host_platform: None | str = ...,\n    deps: list[str] = ...,\n    exported_deps: list[str] = ...,\n    exported_provided_deps: list[str] = ...,\n    extra_arguments: list[str] = ...,\n    jar_postprocessor: None | str = ...,\n    java_version: None | str = ...,\n    javac: None | str = ...,\n    labels: list[str] = ...,\n    licenses: list[str] = ...,\n    manifest_file: None | str = ...,\n    maven_coords: None | str = ...,\n    never_mark_as_unused_dependency: None | bool = ...,\n    on_unused_dependencies: None | str = ...,\n    plugins: list[str | (str, list[str])] = ...,\n    proguard_config: None | str = ...,\n    provided_deps: list[str] = ...,\n    remove_classes: list[str] = ...,\n    required_for_source_only_abi: bool = ...,\n    resources: list[str] = ...,\n    resources_root: None | str = ...,\n    runtime_deps: list[str] = ...,\n    source: None | str = ...,\n    source_abi_verification_mode: None | str = ...,\n    source_only_abi_deps: list[str] = ...,\n    srcs: list[str] = ...,\n    target: None | str = ...,\n    validation_deps: list[str] = ...,\n) -> None\n"})}),"\n",(0,t.jsxs)(n.p,{children:["A ",(0,t.jsx)(n.code,{children:"java_library()"})," rule defines a set of Java files that can be compiled together. The main output of a ",(0,t.jsx)(n.code,{children:"java_library()"})," rule is a single JAR file containing all of the compiled class files, as well as the static files specified in the ",(0,t.jsx)(n.code,{children:"resources"})," argument."]}),"\n",(0,t.jsx)(n.h4,{id:"parameters",children:"Parameters"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"name"}),": name of the target"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"default_target_platform"}),": specifies the default target platform, used when no platforms are specified on the command line"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"target_compatible_with"}),": a list of constraints that are required to be satisfied for this target to be compatible with a configuration"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"compatible_with"}),": a list of constraints that are required to be satisfied for this target to be compatible with a configuration"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"exec_compatible_with"}),": a list of constraints that are required to be satisfied for this target to be compatible with an execution platform"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"visibility"}),": a list of visibility patterns restricting what targets can depend on this one"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"within_view"}),": a list of visibility patterns restricting what this target can depend on"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"metadata"}),": a key-value map of metadata associated with this target"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"tests"}),": a list of targets that provide tests for this one"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"modifiers"}),": an array of modifiers associated with this target"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"concat_resources"}),": Use parallel compression and concatenation of intermediary jars to speed up jar time generation."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"deps"}),": Rules (usually other ",(0,t.jsx)(n.code,{children:"java_library"})," rules) that are used to generate the classpath required to compile this ",(0,t.jsx)(n.code,{children:"java_library"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"exported_deps"}),": Other  rules that depend on this rule will also include its ",(0,t.jsx)(n.code,{children:"exported_deps"})," in their classpaths. This is useful when the public API of a rule has return types or checked exceptions that are defined in another rule, which would otherwise require callers to add an extra dependency. It's also useful for exposing e.g. a collection of ",(0,t.jsx)(n.code,{children:"prebuilt_jar"})," rules as a single target for callers to depend on. Targets in ",(0,t.jsx)(n.code,{children:"exported_deps"})," are implicitly included in the ",(0,t.jsx)(n.code,{children:"deps"})," of this rule, so they don't need to be repeated there."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"exported_provided_deps"}),": This is a combination of ",(0,t.jsx)(n.code,{children:"provided_deps"})," and ",(0,t.jsx)(n.code,{children:"exported_deps"}),". Rules listed in this parameter will be added to classpath of rules that depend on this rule, but they will not be included in a binary if binary depends on a such target."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"extra_arguments"}),": List of additional arguments to pass into the Java compiler. These arguments follow the ones specified in ",(0,t.jsx)(n.code,{children:".buckconfig"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"java_version"}),": Equivalent to setting both ",(0,t.jsx)(n.code,{children:"source"})," and ",(0,t.jsx)(n.code,{children:"target"}),"  to the given value. Setting this and ",(0,t.jsx)(n.code,{children:"source"})," or ",(0,t.jsx)(n.code,{children:"target"})," (or both!) is an error."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"javac"}),": Specifies the Java compiler program to use for this rule. The value is a source path or an execution dep (e.g., //foo/bar",":bar",'). Overrides the value in "javac" in the "tools" section of ',(0,t.jsx)(n.code,{children:".buckconfig"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"on_unused_dependencies"}),": Action performed when Buck detects that some dependencies are not used during Java compilation."]}),"\n",(0,t.jsx)(n.p,{children:"Note that this feature is experimental and does not handle runtime dependencies."}),"\n",(0,t.jsx)(n.p,{children:"The valid values are:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"ignore"})," (default): ignore unused dependencies,"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"warn"}),": emit a warning to the console,"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"fail"}),": fail the compilation."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"This option overrides the default value from\n."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"provided_deps"}),": These represent dependencies that are known to be provided at run time, but are required in order for the code to compile. Examples of ",(0,t.jsx)(n.code,{children:"provided_deps"})," include the JEE servlet APIs. When this rule is included in a , the ",(0,t.jsx)(n.code,{children:"provided_deps"})," will not be packaged into the output."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"remove_classes"}),": Specifies a list of ",(0,t.jsx)(n.code,{children:"Patterns"})," that are used to exclude ",(0,t.jsx)(n.code,{children:"classes"})," from the ",(0,t.jsx)(n.code,{children:"JAR"}),". The pattern matching is based on the name of the class. This can be used to exclude a member class or delete a local view of a class that will be replaced during a later stage of the build."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"required_for_source_only_abi"}),": Indicates that this rule must be present on the classpath during ",(0,t.jsx)(n.code,{children:"source-only ABI generation"})," of any rule that depends on it. Typically this is done when a rule contains annotations, enums, constants, or interfaces."]}),"\n",(0,t.jsx)(n.p,{children:"Having rules present on the classpath during source-only ABI generation prevents Buck from\ncompletely flattening the build graph, thus reducing the performance win from source-only\nABI generation. These rules should be kept small (ideally just containing annotations,\nconstants, enums, and interfaces) and with minimal dependencies of their own."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"resources"}),": Static files to include with the compiled ",(0,t.jsx)(n.code,{children:".class"})," files. These files can be loaded via ",(0,t.jsx)(n.a,{href:"http://docs.oracle.com/javase/7/docs/api/java/lang/Class.html#getResource(java.lang.String)",children:"Class.getResource()"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Note:"})," If ",(0,t.jsx)(n.code,{children:"resources_root"})," isn't set,\nBuck uses the ",(0,t.jsx)(n.code,{children:".buckconfig"}),"\nproperty in ",(0,t.jsx)(n.code,{children:".buckconfig"})," to\ndetermine where resources should be placed within the generated JAR\nfile."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"source"}),': Specifies the version of Java (as a string) to interpret source files as. Overrides the value in "source_level" in the "java" section of ',(0,t.jsx)(n.code,{children:".buckconfig"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"source_only_abi_deps"}),": These are dependencies that must be present during ",(0,t.jsx)(n.code,{children:"source-only ABI generation"}),". Typically such dependencies are added when some property of the code in this rule prevents source-only ABI generation from being correct without these dependencies being present."]}),"\n",(0,t.jsxs)(n.p,{children:["Having ",(0,t.jsx)(n.code,{children:"source_only_abi_deps"})," prevents Buck from\ncompletely flattening the build graph, thus reducing the performance win from source-only\nABI generation. They should be avoided when possible. Often only a small code change is needed to avoid them.\nFor more information on such code changes, read about\n",(0,t.jsx)(n.code,{children:"source-only ABI generation"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"srcs"}),": The set of ",(0,t.jsx)(n.code,{children:".java"})," files to compile for this rule. If any of the files in this list end in ",(0,t.jsx)(n.code,{children:".src.zip"}),", then the entries in the ZIP file that end in ",(0,t.jsx)(n.code,{children:".java"})," will be included as ordinary inputs to compilation. This is common when using a ",(0,t.jsx)(n.code,{children:"genrule()"})," to auto-generate some Java source code that needs to be compiled with some hand-written Java code."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"target"}),': Specifies the version of Java (as a string) for which to generate code. Overrides the value in "target_level" in the "java" section of ',(0,t.jsx)(n.code,{children:".buckconfig"}),"."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"details",children:"Details"}),"\n",(0,t.jsx)(n.p,{children:"Examples:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"\n# A rule that compiles a single .java file.\njava_library(\n  name = 'JsonUtil',\n  srcs = ['JsonUtil.java'],\n  deps = [\n    '//third_party/guava:guava',\n    '//third_party/jackson:jackson',\n  ],\n)\n\n# A rule that compiles all of the .java files under the directory in\n# which the rule is defined using glob(). It also excludes an\n# individual file that may have additional dependencies, so it is\n# compiled by a separate rule.\njava_library(\n  name = 'messenger',\n  srcs = glob(['**/*.java'], excludes = ['MessengerModule.java']),\n  deps = [\n    '//src/com/facebook/base:base',\n    '//third_party/guava:guava',\n  ],\n)\n\njava_library(\n  name = 'MessengerModule',\n  srcs = ['MessengerModule.java'],\n  deps = [\n    '//src/com/facebook/base:base',\n    '//src/com/google/inject:inject',\n    '//third_party/guava:guava',\n    '//third_party/jsr-330:jsr-330',\n  ],\n)\n\n# A rule that builds a library with both relative and\n# fully-qualified deps.\njava_library(\n  name = 'testutil',\n  srcs = glob(['tests/**/*.java'], excludes = 'tests/**/*Test.java'),\n  deps = [\n    ':lib-fb4a',\n    '//java/com/facebook/base:base',\n  ],\n)\n\n"})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>o});var i=s(96540);const t={},r=i.createContext(t);function a(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);