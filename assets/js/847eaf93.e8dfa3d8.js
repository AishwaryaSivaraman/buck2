"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7070],{28453:(e,t,s)=>{s.d(t,{R:()=>l,x:()=>o});var r=s(96540);const n={},i=r.createContext(n);function l(e){const t=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:l(e.components),r.createElement(i.Provider,{value:t},e.children)}},65710:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>a,contentTitle:()=>o,default:()=>d,frontMatter:()=>l,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"prelude/rules/cxx_toolchain","title":"cxx_toolchain","description":"name","source":"@site/../docs/prelude/rules/cxx_toolchain.md","sourceDirName":"prelude/rules","slug":"/prelude/rules/cxx_toolchain","permalink":"/docs/prelude/rules/cxx_toolchain","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"ruleSidebar","previous":{"title":"cxx_test","permalink":"/docs/prelude/rules/cxx_test"},"next":{"title":"cxx_universal_executable","permalink":"/docs/prelude/rules/cxx_universal_executable"}}');var n=s(74848),i=s(28453);s(56289);const l={},o="cxx_toolchain",a={},c=[{value:"name",id:"name",level:2},{value:"Parameters",id:"parameters",level:4}];function _(e){const t={code:"code",h1:"h1",h2:"h2",h4:"h4",header:"header",li:"li",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"cxx_toolchain",children:"cxx_toolchain"})}),"\n",(0,n.jsx)(t.h2,{id:"name",children:"name"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-python",children:"def name(\n    *,\n    name: str,\n    default_target_platform: None | str = ...,\n    target_compatible_with: list[str] = ...,\n    compatible_with: list[str] = ...,\n    exec_compatible_with: list[str] = ...,\n    visibility: list[str] = ...,\n    within_view: list[str] = ...,\n    metadata: OpaqueMetadata = ...,\n    tests: list[str] = ...,\n    modifiers: OpaqueMetadata = ...,\n    _apple_platforms: dict[str, str] = ...,\n    _dumpbin_toolchain_path: None | str = ...,\n    _msvc_hermetic_exec: str = ...,\n    archive_contents: str = ...,\n    archive_symbol_table: bool = ...,\n    archiver: str,\n    archiver_flags: list[str] = ...,\n    archiver_reads_inputs: bool = ...,\n    archiver_supports_argfiles: bool = ...,\n    archiver_type: str,\n    asm_compiler: None | str = ...,\n    asm_compiler_flags: list[str] = ...,\n    asm_compiler_type: None | str = ...,\n    asm_preprocessor: None | str = ...,\n    asm_preprocessor_flags: list[str] = ...,\n    asm_preprocessor_type: None | str = ...,\n    assembler: str,\n    assembler_flags: list[str] = ...,\n    assembler_preprocessor: None | str = ...,\n    assembler_preprocessor_flags: list[str] = ...,\n    assembler_preprocessor_type: None | str = ...,\n    assembler_type: None | str = ...,\n    binary_extension: None | str = ...,\n    binary_linker_flags: list[str] = ...,\n    bolt: None | str = ...,\n    bolt_enabled: bool = ...,\n    c_compiler: str,\n    c_compiler_allow_cache_upload: None | bool = ...,\n    c_compiler_flags: list[str] = ...,\n    c_compiler_type: None | str = ...,\n    c_preprocessor_flags: list[str] = ...,\n    cache_links: bool = ...,\n    clang_remarks: None | str = ...,\n    clang_trace: None | bool = ...,\n    compiler_type: None | str = ...,\n    contacts: list[str] = ...,\n    cpp_dep_tracking_mode: str = ...,\n    cuda_compiler: None | str = ...,\n    cuda_compiler_allow_cache_upload: None | bool = ...,\n    cuda_compiler_flags: list[str] = ...,\n    cuda_compiler_type: None | str = ...,\n    cuda_dep_tracking_mode: str = ...,\n    cuda_preprocessor_flags: list[str] = ...,\n    custom_tools: dict[str, str] = ...,\n    cvtres_compiler: None | str = ...,\n    cvtres_compiler_flags: list[str] = ...,\n    cvtres_compiler_type: None | str = ...,\n    cvtres_preprocessor_flags: list[str] = ...,\n    cxx_compiler: str,\n    cxx_compiler_allow_cache_upload: None | bool = ...,\n    cxx_compiler_flags: list[str] = ...,\n    cxx_compiler_type: None | str = ...,\n    cxx_preprocessor_flags: list[str] = ...,\n    debug_path_prefix_map_sanitizer_format: None | str = ...,\n    default_host_platform: None | str = ...,\n    dist_thin_lto_codegen_flags: list[str] = ...,\n    dwp: None | str = ...,\n    executable_linker_flags: list[str] = ...,\n    gcno_files: bool = ...,\n    generate_linker_maps: bool = ...,\n    headers_as_raw_headers_mode: None | str = ...,\n    hip_compiler: None | str = ...,\n    hip_compiler_flags: list[str] = ...,\n    hip_compiler_type: None | str = ...,\n    hip_preprocessor_flags: list[str] = ...,\n    internal_tools: str = ...,\n    labels: list[str] = ...,\n    licenses: list[str] = ...,\n    link_metadata_flag: None | str = ...,\n    link_ordering: str = ...,\n    link_style: str = ...,\n    link_weight: int = ...,\n    linker: str,\n    linker_flags: list[str] = ...,\n    linker_type: str,\n    lipo: None | str = ...,\n    llvm_link: None | str = ...,\n    lto_mode: str = ...,\n    min_sdk_version: None | str = ...,\n    nm: str,\n    objc_compiler_flags: list[str] = ...,\n    objcopy_for_shared_library_interface: str,\n    objcxx_compiler_flags: list[str] = ...,\n    objdump: None | str = ...,\n    object_file_extension: str = ...,\n    object_format: str = ...,\n    optimization_compiler_flags_EXPERIMENTAL: list[str] = ...,\n    pic_behavior: str = ...,\n    placeholder_tool: None | str = ...,\n    platform_deps_aliases: None | list[str] = ...,\n    platform_name: None | str = ...,\n    post_linker_flags: list[str] = ...,\n    private_headers_symlinks_enabled: bool = ...,\n    public_headers_symlinks_enabled: bool = ...,\n    ranlib: None | str = ...,\n    ranlib_flags: list[str] = ...,\n    raw_headers_as_headers_mode: None | str = ...,\n    rc_compiler: None | str = ...,\n    rc_compiler_flags: list[str] = ...,\n    rc_compiler_type: None | str = ...,\n    rc_preprocessor_flags: list[str] = ...,\n    remap_cwd: bool = ...,\n    requires_archives: bool = ...,\n    requires_objects: bool = ...,\n    sanitizer_runtime_enabled: bool = ...,\n    sanitizer_runtime_files: list[str] = ...,\n    shared_dep_runtime_ld_flags: list[str] = ...,\n    shared_library_extension: str = ...,\n    shared_library_interface_flags: list[str] = ...,\n    shared_library_interface_mode: str = ...,\n    shared_library_interface_producer: None | str = ...,\n    shared_library_interface_type: str,\n    shared_library_versioned_extension_format: str = ...,\n    split_debug_mode: str = ...,\n    static_dep_runtime_ld_flags: list[str] = ...,\n    static_library_extension: str = ...,\n    static_pic_dep_runtime_ld_flags: list[str] = ...,\n    strip: str,\n    strip_all_flags: None | list[str] = ...,\n    strip_debug_flags: None | list[str] = ...,\n    strip_non_global_flags: None | list[str] = ...,\n    supports_distributed_thinlto: bool = ...,\n    supports_two_phase_compilation: bool = ...,\n    target_sdk_version: None | str = ...,\n    thin_lto_premerger_enabled: bool = ...,\n    use_archiver_flags: bool = ...,\n    use_dep_files: None | bool = ...,\n    use_header_map: bool = ...,\n) -> None\n"})}),"\n",(0,n.jsx)(t.h4,{id:"parameters",children:"Parameters"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"name"}),": name of the target"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"default_target_platform"}),": specifies the default target platform, used when no platforms are specified on the command line"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"target_compatible_with"}),": a list of constraints that are required to be satisfied for this target to be compatible with a configuration"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"compatible_with"}),": a list of constraints that are required to be satisfied for this target to be compatible with a configuration"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"exec_compatible_with"}),": a list of constraints that are required to be satisfied for this target to be compatible with an execution platform"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"visibility"}),": a list of visibility patterns restricting what targets can depend on this one"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"within_view"}),": a list of visibility patterns restricting what this target can depend on"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"metadata"}),": a key-value map of metadata associated with this target"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"tests"}),": a list of targets that provide tests for this one"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"modifiers"}),": an array of modifiers associated with this target"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"binary_linker_flags"}),": Linker flags that apply to all links coordinated by a binary rule.  One key distinction between these and ",(0,n.jsx)(t.code,{children:"executable_linker_flags"})," is that these will also apply to library links coordinated by binary rules (e.g. linking roots/deps when using native python or omnibus link strategies)."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"c_compiler_allow_cache_upload"}),": Whether to allow uploading of object files to cache when the compile action is executed locally and the configuration allows uploads (i.e., there is a cache configured and the client has permission to write to it)."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"cuda_compiler_allow_cache_upload"}),": Whether to allow uploading of object files to cache when the compile action is executed locally and the configuration allows uploads (i.e., there is a cache configured and the client has permission to write to it)."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"cxx_compiler_allow_cache_upload"}),": Whether to allow uploading of object files to cache when the compile action is executed locally and the configuration allows uploads (i.e., there is a cache configured and the client has permission to write to it)."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"executable_linker_flags"}),": Linker flags that only apply when linking an executable."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"link_style"}),": The default value of the ",(0,n.jsx)(t.code,{children:"link_style"})," attribute for rules that use this toolchain."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"raw_headers_as_headers_mode"}),": Controls whether raw_headers and *include_directories attributes should be automatically converted to headers and symlink trees and/or header maps via headers. Only has an effect if the cxx_toolchain has explicitly opted into supporting this behavior via a non-default value, even if the value is disabled."]}),"\n"]})]})}function d(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(_,{...e})}):_(e)}}}]);