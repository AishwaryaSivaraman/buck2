"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7680],{28453:(e,t,n)=>{n.d(t,{R:()=>l,x:()=>o});var i=n(96540);const s={},r=i.createContext(s);function l(e){const t=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),i.createElement(r.Provider,{value:t},e.children)}},43633:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"prelude/rules/llvm_link_bitcode","title":"llvm_link_bitcode","description":"name","source":"@site/../docs/prelude/rules/llvm_link_bitcode.md","sourceDirName":"prelude/rules","slug":"/prelude/rules/llvm_link_bitcode","permalink":"/docs/prelude/rules/llvm_link_bitcode","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"ruleSidebar","previous":{"title":"legacy_toolchain","permalink":"/docs/prelude/rules/legacy_toolchain"},"next":{"title":"lua_binary","permalink":"/docs/prelude/rules/lua_binary"}}');var s=n(74848),r=n(28453);n(56289);const l={},o="llvm_link_bitcode",c={},a=[{value:"name",id:"name",level:2},{value:"Parameters",id:"parameters",level:4},{value:"Details",id:"details",level:4}];function d(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"llvm_link_bitcode",children:"llvm_link_bitcode"})}),"\n",(0,s.jsx)(t.h2,{id:"name",children:"name"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:"def name(\n    *,\n    name: str,\n    default_target_platform: None | str = ...,\n    target_compatible_with: list[str] = ...,\n    compatible_with: list[str] = ...,\n    exec_compatible_with: list[str] = ...,\n    visibility: list[str] = ...,\n    within_view: list[str] = ...,\n    metadata: OpaqueMetadata = ...,\n    tests: list[str] = ...,\n    modifiers: OpaqueMetadata = ...,\n    _apple_platforms: dict[str, str] = ...,\n    _cxx_toolchain: str = ...,\n    deps: list[str] = ...,\n    deps_query: None | str = ...,\n    srcs: list[str | (str, list[str])] = ...,\n) -> None\n"})}),"\n",(0,s.jsx)(t.p,{children:"A llvm_link_bitcode() rule builds a LLVM bitcode object from a given set LLVM bitcode inputs."}),"\n",(0,s.jsx)(t.h4,{id:"parameters",children:"Parameters"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.code,{children:"name"}),": name of the target"]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.code,{children:"default_target_platform"}),": specifies the default target platform, used when no platforms are specified on the command line"]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.code,{children:"target_compatible_with"}),": a list of constraints that are required to be satisfied for this target to be compatible with a configuration"]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.code,{children:"compatible_with"}),": a list of constraints that are required to be satisfied for this target to be compatible with a configuration"]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.code,{children:"exec_compatible_with"}),": a list of constraints that are required to be satisfied for this target to be compatible with an execution platform"]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.code,{children:"visibility"}),": a list of visibility patterns restricting what targets can depend on this one"]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.code,{children:"within_view"}),": a list of visibility patterns restricting what this target can depend on"]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.code,{children:"metadata"}),": a key-value map of metadata associated with this target"]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.code,{children:"tests"}),": a list of targets that provide tests for this one"]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.code,{children:"modifiers"}),": an array of modifiers associated with this target"]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.code,{children:"deps_query"}),": Status: ",(0,s.jsx)(t.strong,{children:"experimental/unstable"}),". The deps query takes a query string that accepts the following query functions, and appends the output of the query to the declared deps:"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.code,{children:"attrfilter"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.code,{children:"deps"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.code,{children:"except"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.code,{children:"intersect"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.code,{children:"filter"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.code,{children:"kind"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.code,{children:"set"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.code,{children:"union"})}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"Some example queries:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"  \"filter({name_regex}, deps('//foo:foo'))\".format(name_regex='//.*')\n  \"attrfilter(annotation_processors, com.foo.Processor, deps('//foo:foo'))\"\n  \"deps('//foo:foo', 1)\"\n"})}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.code,{children:"srcs"}),": The set of C, C++, Objective-C, Objective-C++, or assembly source files to be preprocessed, compiled, and assembled by this rule. We determine which stages to run on each input source based on its file extension. See the ",(0,s.jsx)(t.a,{href:"https://gcc.gnu.org/onlinedocs/gcc/Overall-Options.html",children:"GCC documentation"})," for more detail on how file extensions are interpreted. Each element can be either a string specifying a source file (e.g. ",(0,s.jsx)(t.code,{children:"''"}),") or a tuple of a string specifying a source file and a list of compilation flags (e.g. ",(0,s.jsx)(t.code,{children:"('', ['-Wall', '-Werror'])"})," ). In the latter case the specified flags will be used in addition to the rule's other flags when preprocessing and compiling that file (if applicable)."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(t.h4,{id:"details",children:"Details"}),"\n",(0,s.jsx)(t.p,{children:"Examples:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"\n# A rule that builds and runs C/C++ test using gtest.\nllvm_link_bitcode(\n  name = 'echo_test',\n  srcs = [\n    'echo_test.o',  // Where this is a LLVM bitcode object.\n    'echo_other.o', // And this is another LLVM bitcode object.\n  ],\n)\n\n"})})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);